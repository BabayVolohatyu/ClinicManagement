// <auto-generated />
using System;
using ClinicManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicManagement.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20250911070509_UpdateDeleteBehaviors")]
    partial class UpdateDeleteBehaviors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagement.Models.Facilities.Cabinet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Building")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("ClinicManagement.Models.Facilities.CabinetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CabinetTypes");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Procedures");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Sickness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sicknesses");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessProcedure", b =>
                {
                    b.Property<int>("SicknessId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("integer");

                    b.HasKey("SicknessId", "ProcedureId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("SicknessProcedures");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessSymptom", b =>
                {
                    b.Property<int>("SicknessId")
                        .HasColumnType("integer");

                    b.Property<int>("SymptomId")
                        .HasColumnType("integer");

                    b.HasKey("SicknessId", "SymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("SicknessSymptoms");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessTreatment", b =>
                {
                    b.Property<int>("SicknessId")
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("integer");

                    b.HasKey("SicknessId", "TreatmentId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("SicknessTreatments");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.DistrictDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("DoctorId");

                    b.ToTable("DistrictDoctors");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("integer");

                    b.Property<bool>("DidItHappen")
                        .HasColumnType("boolean");

                    b.Property<int>("DoctorProcedureId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamptz");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("DoctorProcedureId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.DoctorOnCallStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("DoctorOnCallStatuses");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.DoctorProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("DoctorProcedures");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.HomeCallLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamptz");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DoctorId");

                    b.ToTable("HomeCallLogs");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CabinetId")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ClinicManagement.Models.Facilities.Cabinet", b =>
                {
                    b.HasOne("ClinicManagement.Models.Facilities.CabinetType", "Type")
                        .WithMany("Cabinets")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Diagnosis", b =>
                {
                    b.HasOne("ClinicManagement.Models.Info.Appointment", "Appointment")
                        .WithOne("Diagnosis")
                        .HasForeignKey("ClinicManagement.Models.Health.Diagnosis", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessProcedure", b =>
                {
                    b.HasOne("ClinicManagement.Models.Health.Procedure", "Procedure")
                        .WithMany("SicknessProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Health.Sickness", "Sickness")
                        .WithMany("SicknessProcedures")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedure");

                    b.Navigation("Sickness");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessSymptom", b =>
                {
                    b.HasOne("ClinicManagement.Models.Health.Sickness", "Sickness")
                        .WithMany("SicknessSymptoms")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Health.Symptom", "Symptom")
                        .WithMany("SicknessSymptoms")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sickness");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.SicknessTreatment", b =>
                {
                    b.HasOne("ClinicManagement.Models.Health.Sickness", "Sickness")
                        .WithMany("SicknessTreatment")
                        .HasForeignKey("SicknessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Health.Treatment", "Treatment")
                        .WithMany("SicknessTreatment")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sickness");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.DistrictDoctor", b =>
                {
                    b.HasOne("ClinicManagement.Models.Humans.Doctor", "Doctor")
                        .WithOne("DistrictDoctor")
                        .HasForeignKey("ClinicManagement.Models.Humans.DistrictDoctor", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Doctor", b =>
                {
                    b.HasOne("ClinicManagement.Models.Humans.Person", "Person")
                        .WithOne("Doctor")
                        .HasForeignKey("ClinicManagement.Models.Humans.Doctor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Specialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Patient", b =>
                {
                    b.HasOne("ClinicManagement.Models.Info.Address", "Address")
                        .WithMany("Patients")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Person", "Person")
                        .WithOne("Patient")
                        .HasForeignKey("ClinicManagement.Models.Humans.Patient", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.Models.Facilities.Cabinet", "Cabinet")
                        .WithMany("Appointments")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Info.DoctorProcedure", "DoctorProcedure")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("DoctorProcedure");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.DoctorOnCallStatus", b =>
                {
                    b.HasOne("ClinicManagement.Models.Info.Address", "Address")
                        .WithMany("DoctorOnCallStatuses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Doctor", "Doctor")
                        .WithOne("OnCallStatus")
                        .HasForeignKey("ClinicManagement.Models.Info.DoctorOnCallStatus", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.DoctorProcedure", b =>
                {
                    b.HasOne("ClinicManagement.Models.Humans.Doctor", "Doctor")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Health.Procedure", "Procedure")
                        .WithMany("DoctorProcedures")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.HomeCallLog", b =>
                {
                    b.HasOne("ClinicManagement.Models.Info.Address", "Address")
                        .WithMany("HomeCallLogs")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Doctor", "Doctor")
                        .WithMany("HomeCallLogs")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Schedule", b =>
                {
                    b.HasOne("ClinicManagement.Models.Facilities.Cabinet", "Cabinet")
                        .WithMany("Schedules")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicManagement.Models.Humans.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cabinet");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.Models.Facilities.Cabinet", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ClinicManagement.Models.Facilities.CabinetType", b =>
                {
                    b.Navigation("Cabinets");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Procedure", b =>
                {
                    b.Navigation("DoctorProcedures");

                    b.Navigation("SicknessProcedures");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Sickness", b =>
                {
                    b.Navigation("SicknessProcedures");

                    b.Navigation("SicknessSymptoms");

                    b.Navigation("SicknessTreatment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Symptom", b =>
                {
                    b.Navigation("SicknessSymptoms");
                });

            modelBuilder.Entity("ClinicManagement.Models.Health.Treatment", b =>
                {
                    b.Navigation("SicknessTreatment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Doctor", b =>
                {
                    b.Navigation("DistrictDoctor");

                    b.Navigation("DoctorProcedures");

                    b.Navigation("HomeCallLogs");

                    b.Navigation("OnCallStatus");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Person", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Humans.Specialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Address", b =>
                {
                    b.Navigation("DoctorOnCallStatuses");

                    b.Navigation("HomeCallLogs");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.Appointment", b =>
                {
                    b.Navigation("Diagnosis");
                });

            modelBuilder.Entity("ClinicManagement.Models.Info.DoctorProcedure", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
